// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sensors.sql

package sqlc

import (
	"context"
)

const getSensorIdBySensorName = `-- name: GetSensorIdBySensorName :one
SELECT 
    id
FROM 
    sensors
WHERE 
    sensor_name = $1
`

func (q *Queries) GetSensorIdBySensorName(ctx context.Context, sensorName string) (int64, error) {
	row := q.db.QueryRow(ctx, getSensorIdBySensorName, sensorName)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getSensors = `-- name: GetSensors :many
SELECT 
    id, sensor_name, sensor_location, device_type_id
FROM 
    sensors
`

func (q *Queries) GetSensors(ctx context.Context) ([]*Sensor, error) {
	rows, err := q.db.Query(ctx, getSensors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Sensor
	for rows.Next() {
		var i Sensor
		if err := rows.Scan(
			&i.ID,
			&i.SensorName,
			&i.SensorLocation,
			&i.DeviceTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
