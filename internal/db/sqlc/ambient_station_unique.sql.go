// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ambient_station_unique.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertAmbientStationData = `-- name: InsertAmbientStationData :exec
INSERT INTO ambient_station_unique
    (
        id, 
        timestamp, 
        "date", 
        timezone, 
        date_utc, 
        inside_temp_feels_like_f, 
        outside_temp_f, 
        outside_temp_feels_like_f, 
        outside_humidity, 
        inside_dew_point, 
        outside_dew_point, 
        relative_pressure, 
        wind_direction, 
        wind_speed_mph, 
        wind_speed_gust_mph, 
        max_daily_gust_mph, 
        event_rain_inches, 
        hourly_rain_inches, 
        daily_rain_inches, 
        weekly_rain_inches, 
        monthly_rain_inches, 
        total_rain_inches, 
        last_rain, 
        uv_index, 
        solar_radiation, 
        outside_batt_status, 
        co2_batt_status, 
        device_id,
        device_type_id
    )
VALUES 
(
    DEFAULT, 
    $1, 
    $2, 
    $3, 
    $4, 
    $5, 
    $6, 
    $7, 
    $8, 
    $9, 
    $10, 
    $11, 
    $12, 
    $13, 
    $14, 
    $15, 
    $16, 
    $17, 
    $18, 
    $19, 
    $20, 
    $21, 
    $22, 
    $23, 
    $24, 
    $25, 
    $26, 
    $27, 
    $28
)
`

type InsertAmbientStationDataParams struct {
	Timestamp             pgtype.Timestamptz `json:"timestamp"`
	Date                  *string            `json:"date"`
	Timezone              *string            `json:"timezone"`
	DateUtc               *int32             `json:"date_utc"`
	InsideTempFeelsLikeF  *float32           `json:"inside_temp_feels_like_f"`
	OutsideTempF          *float32           `json:"outside_temp_f"`
	OutsideTempFeelsLikeF *float32           `json:"outside_temp_feels_like_f"`
	OutsideHumidity       *float32           `json:"outside_humidity"`
	InsideDewPoint        *float32           `json:"inside_dew_point"`
	OutsideDewPoint       *float32           `json:"outside_dew_point"`
	RelativePressure      *float32           `json:"relative_pressure"`
	WindDirection         *float32           `json:"wind_direction"`
	WindSpeedMph          *float32           `json:"wind_speed_mph"`
	WindSpeedGustMph      *float32           `json:"wind_speed_gust_mph"`
	MaxDailyGustMph       *float32           `json:"max_daily_gust_mph"`
	EventRainInches       *float32           `json:"event_rain_inches"`
	HourlyRainInches      *float32           `json:"hourly_rain_inches"`
	DailyRainInches       *float32           `json:"daily_rain_inches"`
	WeeklyRainInches      *float32           `json:"weekly_rain_inches"`
	MonthlyRainInches     *float32           `json:"monthly_rain_inches"`
	TotalRainInches       *float32           `json:"total_rain_inches"`
	LastRain              *string            `json:"last_rain"`
	UvIndex               *float32           `json:"uv_index"`
	SolarRadiation        *float32           `json:"solar_radiation"`
	OutsideBattStatus     *int32             `json:"outside_batt_status"`
	Co2BattStatus         *int32             `json:"co2_batt_status"`
	DeviceID              *int32             `json:"device_id"`
	DeviceTypeID          *int32             `json:"device_type_id"`
}

func (q *Queries) InsertAmbientStationData(ctx context.Context, arg InsertAmbientStationDataParams) error {
	_, err := q.db.Exec(ctx, insertAmbientStationData,
		arg.Timestamp,
		arg.Date,
		arg.Timezone,
		arg.DateUtc,
		arg.InsideTempFeelsLikeF,
		arg.OutsideTempF,
		arg.OutsideTempFeelsLikeF,
		arg.OutsideHumidity,
		arg.InsideDewPoint,
		arg.OutsideDewPoint,
		arg.RelativePressure,
		arg.WindDirection,
		arg.WindSpeedMph,
		arg.WindSpeedGustMph,
		arg.MaxDailyGustMph,
		arg.EventRainInches,
		arg.HourlyRainInches,
		arg.DailyRainInches,
		arg.WeeklyRainInches,
		arg.MonthlyRainInches,
		arg.TotalRainInches,
		arg.LastRain,
		arg.UvIndex,
		arg.SolarRadiation,
		arg.OutsideBattStatus,
		arg.Co2BattStatus,
		arg.DeviceID,
		arg.DeviceTypeID,
	)
	return err
}
