// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: mqtt_config_queries.sql

package sqlc

import (
	"context"
)

const getMqttTopicData = `-- name: GetMqttTopicData :many
SELECT
	mc.mqtt_topic,
	mc.device_id,
    mc.device_type_id,
	dti.device_type
FROM 
	mqtt_config mc
INNER JOIN device_type_ids dti ON mc.device_type_id = dti.device_type_id
`

type GetMqttTopicDataRow struct {
	MqttTopic    *string `json:"mqtt_topic"`
	DeviceID     *int32  `json:"device_id"`
	DeviceTypeID *int32  `json:"device_type_id"`
	DeviceType   string  `json:"device_type"`
}

func (q *Queries) GetMqttTopicData(ctx context.Context) ([]*GetMqttTopicDataRow, error) {
	rows, err := q.db.Query(ctx, getMqttTopicData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetMqttTopicDataRow
	for rows.Next() {
		var i GetMqttTopicDataRow
		if err := rows.Scan(
			&i.MqttTopic,
			&i.DeviceID,
			&i.DeviceTypeID,
			&i.DeviceType,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUniqueMqttTopics = `-- name: GetUniqueMqttTopics :many
SELECT DISTINCT mqtt_topic FROM mqtt_config
`

func (q *Queries) GetUniqueMqttTopics(ctx context.Context) ([]*string, error) {
	rows, err := q.db.Query(ctx, getUniqueMqttTopics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*string
	for rows.Next() {
		var mqtt_topic *string
		if err := rows.Scan(&mqtt_topic); err != nil {
			return nil, err
		}
		items = append(items, mqtt_topic)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
